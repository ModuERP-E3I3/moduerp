<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="EmpMgtMapper">

<!-- 직원 정보를 매핑하기 위한 resultMap -->
	<resultMap id="resultEmployee"
		type="com.e3i3.moduerp.employee.model.dto.Employee">
		<id property="uuid" column="uuid"  />
		<result property="bizNumber" column="biz_number" />
		<result property="approvalCode" column="approval_code" />
		<result property="departmentId" column="department_id" /> <!-- 수정됨 -->
		<result property="jobId" column="job_id" />
		<result property="privateAuthority" column="private_authority" />
		<result property="empNo" column="emp_no" />
		<result property="empName" column="emp_name" />
		<result property="empEmail" column="emp_email" />
		<result property="password" column="password" /> <!-- 추가 -->
		<result property="userPhone" column="user_phone" />
		<result property="registrationDate" column="registration_date" />
		<result property="profileImg" column="profile_img" />
		<result property="updatedAt" column="updated_at" />
		<result property="isDeleted" column="is_deleted" />
		<result property="lastLoginLocation"
			column="last_login_location" />
		<result property="deletedExcuse" column="deleted_excuse" />
		<result property="deletedAt" column="deleted_at" />
		<result property="hireDate" column="hire_date" />
		<result property="quitDate" column="quit_date" />
		<result property="reNum" column="re_num" />
		<result property="address" column="address" />
		<result property="isEmailChanged" column="is_email_changed" />
		<result property="newEmpEmail" column="new_emp_email" />
		<result property="remainingLeave" column="remaining_leave" />
		<result property="contractStartTime"
			column="contract_start_time" />
		<result property="contractEndTime" column="contract_end_time" />
		<result property="mgrUuid" column="mgr_uuid" />
	</resultMap>

	<!-- 모든 직원 정보를 조회하는 쿼리 -->
	<select id="getAllEmployees" resultMap="resultEmployee">
		SELECT E.UUID,
		E.EMP_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME, E.JOB_ID,
		E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER,
		E.PRIVATE_AUTHORITY
		FROM EMPLOYEE
		E
		JOIN DEPARTMENT D
		ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
	</select>


	<!-- UUID로 직원 데이터를 조회하는 쿼리 -->
	<select id="selectEmployeeByUUID" parameterType="String"
		resultMap="resultEmployee">
		SELECT * FROM (
		SELECT E.UUID, E.EMP_NAME, E.DEPARTMENT_ID,
		D.DEPARTMENT_NAME, E.JOB_ID,
		E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER,
		E.PRIVATE_AUTHORITY
		FROM EMPLOYEE E
		JOIN DEPARTMENT D ON
		E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE E.UUID = #{uuid}
		) WHERE ROWNUM
		= 1
	</select>


	<!-- 새로운 직원 데이터를 삽입하는 쿼리 -->
	<insert id="createEmployee"
		parameterType="com.e3i3.moduerp.employee.model.dto.Employee">
		INSERT INTO EMPLOYEE (
		EMP_NO, UUID, EMP_NAME,
		DEPARTMENT_ID, JOB_ID, EMP_EMAIL, USER_PHONE,
		ADDRESS, BIZ_NUMBER,
		APPROVAL_CODE, PRIVATE_AUTHORITY,
		REGISTRATION_DATE, PASSWORD, IS_DELETED
		) VALUES (
		EMP_NO_SEQ.NEXTVAL, #{uuid}, #{empName}, #{departmentId}, #{jobId},
		#{empEmail}, #{userPhone},
		#{address}, #{bizNumber}, #{approvalCode},
		#{privateAuthority},
		SYSDATE, #{password}, #{isDeleted}
		)
	</insert>




	<!-- bizNumber로 APPROVAL_CODE를 조회하는 쿼리 -->
	<select id="getApprovalCodeByBizNumber" resultType="String"
		parameterType="String">
		SELECT APPROVAL_CODE
		FROM EMPLOYEE
		WHERE BIZ_NUMBER = #{bizNumber}
		AND
		ROWNUM = 1  <!-- 하나의 결과만 반환 -->
	</select>

	<!-- 특정 UUID로 직원 데이터를 업데이트하는 쿼리 -->
	<update id="updateEmployee"
		parameterType="com.e3i3.moduerp.employee.model.dto.Employee">
		UPDATE EMPLOYEE
		SET EMP_NAME = #{empName}, DEPARTMENT_ID
		= #{departmentId}, JOB_ID = #{jobId},
		EMP_EMAIL = #{empEmail}, USER_PHONE
		= #{userPhone}, ADDRESS = #{address},
		PRIVATE_AUTHORITY =
		#{privateAuthority}
		WHERE UUID =
		#{uuid}
	</update>

	<!-- 특정 UUID로 직원 데이터를 삭제하는 쿼리 -->
	<delete id="deleteEmployeeByUUID" parameterType="String">
		DELETE FROM
		EMPLOYEE WHERE UUID = #{uuid}
	</delete>

	<!-- 특정 BIZ_NUMBER로 직원 데이터를 조회하는 쿼리 -->
	<select id="getEmployeesByBizNumber" resultMap="resultEmployee"
		parameterType="string">
		SELECT E.UUID, E.EMP_NAME, E.DEPARTMENT_ID,
		MAX(D.DEPARTMENT_NAME) AS DEPARTMENT_NAME, E.JOB_ID,
		E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER,
		E.PRIVATE_AUTHORITY
		FROM EMPLOYEE
		E
		JOIN DEPARTMENT D
		ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE
		E.BIZ_NUMBER = #{bizNumber}
		GROUP BY E.UUID, E.EMP_NAME,
		E.DEPARTMENT_ID, E.JOB_ID,
		E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER,
		E.PRIVATE_AUTHORITY
	</select>


	<!-- 부서 목록을 조회하는 쿼리 -->
	<select id="getAllDepartments"
		resultType="com.e3i3.moduerp.employee.model.dto.Employee">
		SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM DEPARTMENT
	</select>

	<!-- 부서 및 직급 정보를 함께 조회하는 쿼리 -->
	<select id="getEmpNameDepart" parameterType="map"
		resultType="com.e3i3.moduerp.employee.model.dto.Employee">
		SELECT * FROM EMPLOYEE WHERE BIZ_NUMBER = #{bizNumber}
	</select>

	<!-- 사원명 조회 쿼리 -->
	<select id="getEmpNamesByBizNumber" resultType="string">
		SELECT EMP_NAME
		FROM EMPLOYEE WHERE BIZ_NUMBER = #{bizNumber}
	</select>

	<!-- 부서명 조회 쿼리 -->
	<select id="getDepartmentIdsByBizNumber" resultType="string">
		SELECT
		DEPARTMENT_ID
		FROM EMPLOYEE
		WHERE BIZ_NUMBER = #{bizNumber}
	</select>




	<!-- 직원명으로 조회 : 필터 -->
	<select id="selectEmployeesByEmpName" parameterType="map"
		resultMap="resultEmployee">
		SELECT E.UUID, E.EMP_NAME, MAX(D.DEPARTMENT_NAME) AS
		DEPARTMENT_NAME,
		E.JOB_ID, E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER, E.PRIVATE_AUTHORITY
		FROM EMPLOYEE E
		JOIN DEPARTMENT D
		ON
		E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE E.EMP_NAME LIKE '%' ||
		#{filterText} || '%'
		AND E.BIZ_NUMBER = #{bizNumber}
		GROUP BY E.UUID,
		E.EMP_NAME, E.JOB_ID,
		E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER, E.PRIVATE_AUTHORITY
		ORDER BY E.EMP_NAME ASC
	</select>


	<!-- 부서명 조회 : 필터 -->
	<select id="selectEmployeesByDepartmentName" parameterType="map"
		resultMap="resultEmployee">
		SELECT DISTINCT E.UUID, E.EMP_NAME, D.DEPARTMENT_NAME,
		E.JOB_ID,
		E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER,
		E.PRIVATE_AUTHORITY
		FROM EMPLOYEE E
		JOIN DEPARTMENT D ON E.DEPARTMENT_ID
		= D.DEPARTMENT_ID
		WHERE D.DEPARTMENT_NAME LIKE '%' || #{filterText} ||
		'%'
		AND E.BIZ_NUMBER = #{bizNumber}
		ORDER BY D.DEPARTMENT_NAME ASC
	</select>


	<!-- 직급명 조회 : 필터 -->
	<select id="selectEmployeesByJobId" parameterType="map"
		resultMap="resultEmployee">
		SELECT E.UUID, E.EMP_NAME, MAX(D.DEPARTMENT_NAME) AS DEPARTMENT_NAME,
		E.JOB_ID, E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER, E.PRIVATE_AUTHORITY
		FROM EMPLOYEE E
		JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE E.JOB_ID LIKE '%' || #{filterText} || '%'
		AND E.BIZ_NUMBER = #{bizNumber}
		GROUP BY E.UUID, E.EMP_NAME, E.JOB_ID,
		E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER, E.PRIVATE_AUTHORITY
		ORDER BY E.EMP_NAME ASC
	</select>



</mapper>
