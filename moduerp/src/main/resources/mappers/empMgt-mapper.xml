<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="EmpMgtMapper">

	<!-- EmpMgtDTO에 대한 resultMap -->
	<resultMap id="empMgtResult"
		type="com.e3i3.moduerp.empmgt.model.dto.EmpMgtDTO">
		<result property="uuid" column="UUID" /> <!-- UUID 추가 -->
		<result property="empName" column="EMP_NAME" />
		<result property="departmentName" column="DEPARTMENT_NAME" /> <!-- 추가된 부분 -->
		<result property="jobId" column="JOB_ID" />
		<result property="email" column="EMP_EMAIL" />
		<result property="phone" column="USER_PHONE" />
		<result property="address" column="ADDRESS" />
		<result property="bizNumber" column="BIZ_NUMBER" />
	</resultMap>

	<!-- 모든 직원 정보를 조회하는 쿼리 -->
	<select id="getAllEmployees" resultMap="empMgtResult">
		SELECT E.UUID,
		E.EMP_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME, E.JOB_ID, E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
		FROM EMPLOYEE E
		JOIN DEPARTMENT D
		ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
	</select>

	<!-- UUID로 직원 데이터를 조회하는 쿼리 -->
	<select id="selectEmployeeByUUID" parameterType="String"
		resultMap="empMgtResult">
		SELECT * FROM (
		SELECT E.UUID, E.EMP_NAME, E.DEPARTMENT_ID,
		D.DEPARTMENT_NAME, E.JOB_ID,
		E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER
		FROM EMPLOYEE E
		JOIN DEPARTMENT D ON E.DEPARTMENT_ID =
		D.DEPARTMENT_ID
		WHERE E.UUID = #{uuid}
		) WHERE ROWNUM = 1
	</select>

	<!-- 새로운 직원 데이터를 삽입하는 쿼리 -->
	<insert id="createEmployee"
		parameterType="com.e3i3.moduerp.empmgt.model.dto.EmpMgtDTO">
		INSERT INTO EMPLOYEE (
		EMP_NO, UUID, EMP_NAME,
		DEPARTMENT_ID, JOB_ID, EMP_EMAIL, USER_PHONE,
		ADDRESS, BIZ_NUMBER,
		APPROVAL_CODE, PRIVATE_AUTHORITY,
		REGISTRATION_DATE, PASSWORD
		) VALUES (
		EMP_NO_SEQ.NEXTVAL, #{uuid}, #{empName}, #{departmentId}, #{jobId},
		#{email}, #{phone},
		#{address}, #{bizNumber}, #{approvalCode},
		#{privateAuthority},
		SYSDATE, '12345678'
		)
	</insert>




	<!-- bizNumber로 APPROVAL_CODE를 조회하는 쿼리 -->
	<select id="getApprovalCodeByBizNumber" resultType="String"
		parameterType="String">
		SELECT APPROVAL_CODE
		FROM EMPLOYEE
		WHERE BIZ_NUMBER = #{bizNumber}
		AND
		ROWNUM = 1  <!-- 하나의 결과만 반환 -->
	</select>

	<!-- 특정 UUID로 직원 데이터를 업데이트하는 쿼리 -->
	<update id="updateEmployee"
		parameterType="com.e3i3.moduerp.empmgt.model.dto.EmpMgtDTO">
		UPDATE EMPLOYEE
		SET EMP_NAME = #{empName}, DEPARTMENT_ID
		= #{departmentId}, JOB_ID = #{jobId},
		EMP_EMAIL = #{email}, USER_PHONE
		= #{phone}, ADDRESS = #{address}
		WHERE UUID =
		#{uuid}
	</update>

	<!-- 특정 UUID로 직원 데이터를 삭제하는 쿼리 -->
	<delete id="deleteEmployeeByUUID" parameterType="String">
		DELETE FROM
		EMPLOYEE WHERE UUID = #{uuid}
	</delete>

	<!-- 특정 BIZ_NUMBER로 직원 데이터를 조회하는 쿼리 : 필터 -->
	<select id="getEmployeesByBizNumber" resultMap="empMgtResult"
		parameterType="string">
		SELECT E.UUID, E.EMP_NAME, E.DEPARTMENT_ID,
		MAX(D.DEPARTMENT_NAME) AS DEPARTMENT_NAME, E.JOB_ID,
		E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
		FROM EMPLOYEE E
		JOIN DEPARTMENT D
		ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE E.BIZ_NUMBER = #{bizNumber}
		GROUP BY E.UUID, E.EMP_NAME, E.DEPARTMENT_ID, E.JOB_ID, E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
	</select>

	<!-- 부서 목록을 조회하는 쿼리 -->
	<select id="getAllDepartments"
		resultType="com.e3i3.moduerp.department.model.dto.Department">
		SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM DEPARTMENT
	</select>

	<!-- 부서 및 직급 정보를 함께 조회하는 쿼리 -->
	<select id="getEmpNameDepart" parameterType="map"
		resultType="com.e3i3.moduerp.employee.model.dto.Employee">
		SELECT * FROM EMPLOYEE WHERE BIZ_NUMBER = #{bizNumber}
	</select>

	<!-- 사원명 조회 쿼리 -->
	<select id="getEmpNamesByBizNumber" resultType="string">
		SELECT EMP_NAME
		FROM EMPLOYEE WHERE BIZ_NUMBER = #{bizNumber}
	</select>

	<!-- 부서명 조회 쿼리 -->
	<select id="getDepartmentIdsByBizNumber" resultType="string">
		SELECT
		DEPARTMENT_ID
		FROM EMPLOYEE
		WHERE BIZ_NUMBER = #{bizNumber}
	</select>

	<!-- 직원명으로 조회 : 필터 -->
	<select id="selectEmployeesByEmpName" parameterType="map"
		resultMap="empMgtResult">
		SELECT E.UUID, E.EMP_NAME, MAX(D.DEPARTMENT_NAME) AS
		DEPARTMENT_NAME, E.JOB_ID, E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS,
		E.BIZ_NUMBER
		FROM EMPLOYEE E
		JOIN DEPARTMENT D ON E.DEPARTMENT_ID =
		D.DEPARTMENT_ID
		WHERE E.EMP_NAME LIKE '%' || #{filterText} || '%' AND
		E.BIZ_NUMBER = #{bizNumber}
		GROUP BY E.UUID, E.EMP_NAME, E.JOB_ID,
		E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
		ORDER BY E.EMP_NAME
		ASC
	</select>

	<!-- 부서명 조회 : 필터 -->
	<select id="selectEmployeesByDepartmentName" parameterType="map"
		resultMap="empMgtResult">
		SELECT DISTINCT E.UUID, E.EMP_NAME, D.DEPARTMENT_NAME,
		E.JOB_ID, E.EMP_EMAIL, E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
		FROM
		EMPLOYEE E
		JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE
		D.DEPARTMENT_NAME LIKE '%' || #{filterText} || '%' AND E.BIZ_NUMBER =
		#{bizNumber}
		ORDER BY D.DEPARTMENT_NAME ASC
	</select>

	<!-- 직급명 조회 : 필터 -->
	<select id="selectEmployeesByJobId" parameterType="map"
		resultMap="empMgtResult">
		SELECT E.UUID, E.EMP_NAME, D.DEPARTMENT_NAME, E.JOB_ID, E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
		FROM EMPLOYEE E
		JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		WHERE E.JOB_ID = #{jobId} AND E.BIZ_NUMBER = #{bizNumber}
		GROUP BY E.UUID, E.EMP_NAME, D.DEPARTMENT_NAME, E.JOB_ID, E.EMP_EMAIL,
		E.USER_PHONE, E.ADDRESS, E.BIZ_NUMBER
		ORDER BY E.EMP_NAME ASC
	</select>


</mapper>
